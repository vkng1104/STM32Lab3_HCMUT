
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002988  08002988  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002988  08002988  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002988  08002988  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000028  080029b8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080029b8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009556  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b07  00000000  00000000  000295a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d35  00000000  00000000  0002c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b93e  00000000  00000000  0004318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f5  00000000  00000000  0004eacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  000d1014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002824 	.word	0x08002824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002824 	.word	0x08002824

0800014c <initButton>:
int keyReg3[NO_BUTTONS + 1]; // store the old value

int button_flag[NO_BUTTONS + 1];
int button_counter[NO_BUTTONS + 1]; // 2 seconds

void initButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int buttonNo = 1; buttonNo <= NO_BUTTONS; buttonNo++) {
 8000152:	2301      	movs	r3, #1
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initButton+0x4e>
		keyReg0[buttonNo] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		keyReg1[buttonNo] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		keyReg2[buttonNo] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		keyReg3[buttonNo] = NORMAL_STATE; // store the old value
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[buttonNo] = 0;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_counter[buttonNo] = 200; // 2 seconds
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	21c8      	movs	r1, #200	; 0xc8
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int buttonNo = 1; buttonNo <= NO_BUTTONS; buttonNo++) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	dddb      	ble.n	8000158 <initButton+0xc>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000094 	.word	0x20000094
 80001b0:	20000054 	.word	0x20000054
 80001b4:	200000a4 	.word	0x200000a4
 80001b8:	20000084 	.word	0x20000084
 80001bc:	20000074 	.word	0x20000074
 80001c0:	20000064 	.word	0x20000064

080001c4 <getOneKeyInput>:

void getOneKeyInput(int buttonNo, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	4613      	mov	r3, r2
 80001d0:	80fb      	strh	r3, [r7, #6]
	keyReg0[buttonNo] = keyReg1[buttonNo];
 80001d2:	4a34      	ldr	r2, [pc, #208]	; (80002a4 <getOneKeyInput+0xe0>)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001da:	4933      	ldr	r1, [pc, #204]	; (80002a8 <getOneKeyInput+0xe4>)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[buttonNo] = keyReg2[buttonNo];
 80001e2:	4a32      	ldr	r2, [pc, #200]	; (80002ac <getOneKeyInput+0xe8>)
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ea:	492e      	ldr	r1, [pc, #184]	; (80002a4 <getOneKeyInput+0xe0>)
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[buttonNo] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	4619      	mov	r1, r3
 80001f6:	68b8      	ldr	r0, [r7, #8]
 80001f8:	f001 fae6 	bl	80017c8 <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4619      	mov	r1, r3
 8000200:	4a2a      	ldr	r2, [pc, #168]	; (80002ac <getOneKeyInput+0xe8>)
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((keyReg0[buttonNo] == keyReg1[buttonNo])
 8000208:	4a27      	ldr	r2, [pc, #156]	; (80002a8 <getOneKeyInput+0xe4>)
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4924      	ldr	r1, [pc, #144]	; (80002a4 <getOneKeyInput+0xe0>)
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d13e      	bne.n	800029a <getOneKeyInput+0xd6>
			&& (keyReg1[buttonNo] == keyReg2[buttonNo])) {
 800021c:	4a21      	ldr	r2, [pc, #132]	; (80002a4 <getOneKeyInput+0xe0>)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4921      	ldr	r1, [pc, #132]	; (80002ac <getOneKeyInput+0xe8>)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d134      	bne.n	800029a <getOneKeyInput+0xd6>
		if (keyReg3[buttonNo] != keyReg2[buttonNo]) {
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <getOneKeyInput+0xec>)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	491c      	ldr	r1, [pc, #112]	; (80002ac <getOneKeyInput+0xe8>)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000240:	429a      	cmp	r2, r3
 8000242:	d02a      	beq.n	800029a <getOneKeyInput+0xd6>
			keyReg3[buttonNo] = keyReg2[buttonNo];
 8000244:	4a19      	ldr	r2, [pc, #100]	; (80002ac <getOneKeyInput+0xe8>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4918      	ldr	r1, [pc, #96]	; (80002b0 <getOneKeyInput+0xec>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (keyReg2[buttonNo] == PRESSED_STATE) {
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <getOneKeyInput+0xe8>)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d108      	bne.n	8000272 <getOneKeyInput+0xae>
				// todo
				subKeyProcess(buttonNo);
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f000 f85f 	bl	8000324 <subKeyProcess>
				button_counter[buttonNo] = 200;
 8000266:	4a13      	ldr	r2, [pc, #76]	; (80002b4 <getOneKeyInput+0xf0>)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	21c8      	movs	r1, #200	; 0xc8
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (button_counter[buttonNo] == 0)
					keyReg3[buttonNo] = NORMAL_STATE;
			}
		}
	}
}
 8000270:	e013      	b.n	800029a <getOneKeyInput+0xd6>
				button_counter[buttonNo]--;
 8000272:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <getOneKeyInput+0xf0>)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	1e5a      	subs	r2, r3, #1
 800027c:	490d      	ldr	r1, [pc, #52]	; (80002b4 <getOneKeyInput+0xf0>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_counter[buttonNo] == 0)
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <getOneKeyInput+0xf0>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d104      	bne.n	800029a <getOneKeyInput+0xd6>
					keyReg3[buttonNo] = NORMAL_STATE;
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <getOneKeyInput+0xec>)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2101      	movs	r1, #1
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000054 	.word	0x20000054
 80002a8:	20000094 	.word	0x20000094
 80002ac:	200000a4 	.word	0x200000a4
 80002b0:	20000084 	.word	0x20000084
 80002b4:	20000064 	.word	0x20000064

080002b8 <getKeyInput>:

void getKeyInput() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	getOneKeyInput(1, Button1_GPIO_Port, Button1_Pin);
 80002bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002c0:	4908      	ldr	r1, [pc, #32]	; (80002e4 <getKeyInput+0x2c>)
 80002c2:	2001      	movs	r0, #1
 80002c4:	f7ff ff7e 	bl	80001c4 <getOneKeyInput>
	getOneKeyInput(2, Button2_GPIO_Port, Button2_Pin);
 80002c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002cc:	4905      	ldr	r1, [pc, #20]	; (80002e4 <getKeyInput+0x2c>)
 80002ce:	2002      	movs	r0, #2
 80002d0:	f7ff ff78 	bl	80001c4 <getOneKeyInput>
	getOneKeyInput(3, Button3_GPIO_Port, Button3_Pin);
 80002d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d8:	4902      	ldr	r1, [pc, #8]	; (80002e4 <getKeyInput+0x2c>)
 80002da:	2003      	movs	r0, #3
 80002dc:	f7ff ff72 	bl	80001c4 <getOneKeyInput>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <isButtonPressed>:

int isButtonPressed(int buttonNo) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (buttonNo > NO_BUTTONS)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	dd01      	ble.n	80002fa <isButtonPressed+0x12>
		return 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	e00d      	b.n	8000316 <isButtonPressed+0x2e>

	if (button_flag[buttonNo] == 1) {
 80002fa:	4a09      	ldr	r2, [pc, #36]	; (8000320 <isButtonPressed+0x38>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d106      	bne.n	8000314 <isButtonPressed+0x2c>
		button_flag[buttonNo] = 0;
 8000306:	4a06      	ldr	r2, [pc, #24]	; (8000320 <isButtonPressed+0x38>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2100      	movs	r1, #0
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000310:	2301      	movs	r3, #1
 8000312:	e000      	b.n	8000316 <isButtonPressed+0x2e>
	}
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	20000074 	.word	0x20000074

08000324 <subKeyProcess>:

void subKeyProcess(int buttonNo) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	button_flag[buttonNo] = 1;
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <subKeyProcess+0x1c>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2101      	movs	r1, #1
 8000332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	20000074 	.word	0x20000074

08000344 <fsm_automatic_run>:
 *      Author: ASUS
 */

#include "fsm_automatic.h"

void fsm_automatic_run() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	if (status != NORMAL_MODE)
 8000348:	4ba2      	ldr	r3, [pc, #648]	; (80005d4 <fsm_automatic_run+0x290>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	f040 8136 	bne.w	80005be <fsm_automatic_run+0x27a>
		return;
	if (isButtonPressed(1) == 1) {
 8000352:	2001      	movs	r0, #1
 8000354:	f7ff ffc8 	bl	80002e8 <isButtonPressed>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d12c      	bne.n	80003b8 <fsm_automatic_run+0x74>
		status = MANUAL_RED;
 800035e:	4b9d      	ldr	r3, [pc, #628]	; (80005d4 <fsm_automatic_run+0x290>)
 8000360:	2202      	movs	r2, #2
 8000362:	601a      	str	r2, [r3, #0]
		counter_temp = RED_LED_Delay / 1000;	// update temporary counter storing red led delay
 8000364:	4b9c      	ldr	r3, [pc, #624]	; (80005d8 <fsm_automatic_run+0x294>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a9c      	ldr	r2, [pc, #624]	; (80005dc <fsm_automatic_run+0x298>)
 800036a:	fb82 1203 	smull	r1, r2, r2, r3
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	17db      	asrs	r3, r3, #31
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	4a9a      	ldr	r2, [pc, #616]	; (80005e0 <fsm_automatic_run+0x29c>)
 8000376:	6013      	str	r3, [r2, #0]
		counter_light_1 = RED_LED_Delay / 1000;	// counter light 1 show the value of current manual light
 8000378:	4b97      	ldr	r3, [pc, #604]	; (80005d8 <fsm_automatic_run+0x294>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a97      	ldr	r2, [pc, #604]	; (80005dc <fsm_automatic_run+0x298>)
 800037e:	fb82 1203 	smull	r1, r2, r2, r3
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	17db      	asrs	r3, r3, #31
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	4a96      	ldr	r2, [pc, #600]	; (80005e4 <fsm_automatic_run+0x2a0>)
 800038a:	6013      	str	r3, [r2, #0]
		counter_light_2 = status;								// counter light 2 show the mode
 800038c:	4b91      	ldr	r3, [pc, #580]	; (80005d4 <fsm_automatic_run+0x290>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a95      	ldr	r2, [pc, #596]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000392:	6013      	str	r3, [r2, #0]
		setTimer(1, 5000);							// set timer 1 to 5 seconds for manual event
 8000394:	f241 3188 	movw	r1, #5000	; 0x1388
 8000398:	2001      	movs	r0, #1
 800039a:	f000 fe27 	bl	8000fec <setTimer>
		setTimer(2, 500); 							// set timer 2 for led blinking
 800039e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003a2:	2002      	movs	r0, #2
 80003a4:	f000 fe22 	bl	8000fec <setTimer>
		setTimer(3, 250);							// timer 3 still counting 7-seg light
 80003a8:	21fa      	movs	r1, #250	; 0xfa
 80003aa:	2003      	movs	r0, #3
 80003ac:	f000 fe1e 	bl	8000fec <setTimer>
		counter_lights = 1;							// reset counter for switching 7-seg lights
 80003b0:	4b8e      	ldr	r3, [pc, #568]	; (80005ec <fsm_automatic_run+0x2a8>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
		return;
 80003b6:	e10b      	b.n	80005d0 <fsm_automatic_run+0x28c>
	}
	switch (status_light_1) {
 80003b8:	4b8d      	ldr	r3, [pc, #564]	; (80005f0 <fsm_automatic_run+0x2ac>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3b01      	subs	r3, #1
 80003be:	2b03      	cmp	r3, #3
 80003c0:	d87b      	bhi.n	80004ba <fsm_automatic_run+0x176>
 80003c2:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <fsm_automatic_run+0x84>)
 80003c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c8:	080003d9 	.word	0x080003d9
 80003cc:	0800040d 	.word	0x0800040d
 80003d0:	08000447 	.word	0x08000447
 80003d4:	08000481 	.word	0x08000481
	case INIT:
		initLights();
 80003d8:	f000 fa9e 	bl	8000918 <initLights>
		status_light_1 = AUTO_RED;
 80003dc:	4b84      	ldr	r3, [pc, #528]	; (80005f0 <fsm_automatic_run+0x2ac>)
 80003de:	2202      	movs	r2, #2
 80003e0:	601a      	str	r2, [r3, #0]
		setTimer(1, RED_LED_Delay);
 80003e2:	4b7d      	ldr	r3, [pc, #500]	; (80005d8 <fsm_automatic_run+0x294>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2001      	movs	r0, #1
 80003ea:	f000 fdff 	bl	8000fec <setTimer>
		counter_light_1 = RED_LED_Delay / 1000;
 80003ee:	4b7a      	ldr	r3, [pc, #488]	; (80005d8 <fsm_automatic_run+0x294>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a7a      	ldr	r2, [pc, #488]	; (80005dc <fsm_automatic_run+0x298>)
 80003f4:	fb82 1203 	smull	r1, r2, r2, r3
 80003f8:	1192      	asrs	r2, r2, #6
 80003fa:	17db      	asrs	r3, r3, #31
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	4a79      	ldr	r2, [pc, #484]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000400:	6013      	str	r3, [r2, #0]
		setTimer(3, 250); 		// timer 3 for counting light
 8000402:	21fa      	movs	r1, #250	; 0xfa
 8000404:	2003      	movs	r0, #3
 8000406:	f000 fdf1 	bl	8000fec <setTimer>
		break;
 800040a:	e05d      	b.n	80004c8 <fsm_automatic_run+0x184>
	case AUTO_RED:
		setRedLight1(blink);
 800040c:	4b79      	ldr	r3, [pc, #484]	; (80005f4 <fsm_automatic_run+0x2b0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 facd 	bl	80009b0 <setRedLight1>
		if (timer_flag[1] == 1) {
 8000416:	4b78      	ldr	r3, [pc, #480]	; (80005f8 <fsm_automatic_run+0x2b4>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d14f      	bne.n	80004be <fsm_automatic_run+0x17a>
			status_light_1 = AUTO_GREEN;
 800041e:	4b74      	ldr	r3, [pc, #464]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000420:	2203      	movs	r2, #3
 8000422:	601a      	str	r2, [r3, #0]
			setTimer(1, GREEN_LED_Delay);
 8000424:	4b75      	ldr	r3, [pc, #468]	; (80005fc <fsm_automatic_run+0x2b8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4619      	mov	r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fdde 	bl	8000fec <setTimer>
			counter_light_1 = GREEN_LED_Delay / 1000;
 8000430:	4b72      	ldr	r3, [pc, #456]	; (80005fc <fsm_automatic_run+0x2b8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a69      	ldr	r2, [pc, #420]	; (80005dc <fsm_automatic_run+0x298>)
 8000436:	fb82 1203 	smull	r1, r2, r2, r3
 800043a:	1192      	asrs	r2, r2, #6
 800043c:	17db      	asrs	r3, r3, #31
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	4a68      	ldr	r2, [pc, #416]	; (80005e4 <fsm_automatic_run+0x2a0>)
 8000442:	6013      	str	r3, [r2, #0]
		}
		break;
 8000444:	e03b      	b.n	80004be <fsm_automatic_run+0x17a>
	case AUTO_GREEN:
		setGreenLight1(blink);
 8000446:	4b6b      	ldr	r3, [pc, #428]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 facc 	bl	80009e8 <setGreenLight1>
		if (timer_flag[1] == 1) {
 8000450:	4b69      	ldr	r3, [pc, #420]	; (80005f8 <fsm_automatic_run+0x2b4>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d134      	bne.n	80004c2 <fsm_automatic_run+0x17e>
			status_light_1 = AUTO_YELLOW;
 8000458:	4b65      	ldr	r3, [pc, #404]	; (80005f0 <fsm_automatic_run+0x2ac>)
 800045a:	2204      	movs	r2, #4
 800045c:	601a      	str	r2, [r3, #0]
			setTimer(1, YELLOW_LED_Delay);
 800045e:	4b68      	ldr	r3, [pc, #416]	; (8000600 <fsm_automatic_run+0x2bc>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fdc1 	bl	8000fec <setTimer>
			counter_light_1 = YELLOW_LED_Delay / 1000;
 800046a:	4b65      	ldr	r3, [pc, #404]	; (8000600 <fsm_automatic_run+0x2bc>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a5b      	ldr	r2, [pc, #364]	; (80005dc <fsm_automatic_run+0x298>)
 8000470:	fb82 1203 	smull	r1, r2, r2, r3
 8000474:	1192      	asrs	r2, r2, #6
 8000476:	17db      	asrs	r3, r3, #31
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	4a5a      	ldr	r2, [pc, #360]	; (80005e4 <fsm_automatic_run+0x2a0>)
 800047c:	6013      	str	r3, [r2, #0]
		}
		break;
 800047e:	e020      	b.n	80004c2 <fsm_automatic_run+0x17e>
	case AUTO_YELLOW:
		setYellowLight1(blink);
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 facb 	bl	8000a20 <setYellowLight1>
		if (timer_flag[1] == 1) {
 800048a:	4b5b      	ldr	r3, [pc, #364]	; (80005f8 <fsm_automatic_run+0x2b4>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d119      	bne.n	80004c6 <fsm_automatic_run+0x182>
			status_light_1 = AUTO_RED;
 8000492:	4b57      	ldr	r3, [pc, #348]	; (80005f0 <fsm_automatic_run+0x2ac>)
 8000494:	2202      	movs	r2, #2
 8000496:	601a      	str	r2, [r3, #0]
			setTimer(1, RED_LED_Delay);
 8000498:	4b4f      	ldr	r3, [pc, #316]	; (80005d8 <fsm_automatic_run+0x294>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fda4 	bl	8000fec <setTimer>
			counter_light_1 = RED_LED_Delay / 1000;
 80004a4:	4b4c      	ldr	r3, [pc, #304]	; (80005d8 <fsm_automatic_run+0x294>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a4c      	ldr	r2, [pc, #304]	; (80005dc <fsm_automatic_run+0x298>)
 80004aa:	fb82 1203 	smull	r1, r2, r2, r3
 80004ae:	1192      	asrs	r2, r2, #6
 80004b0:	17db      	asrs	r3, r3, #31
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	4a4b      	ldr	r2, [pc, #300]	; (80005e4 <fsm_automatic_run+0x2a0>)
 80004b6:	6013      	str	r3, [r2, #0]
		}
		break;
 80004b8:	e005      	b.n	80004c6 <fsm_automatic_run+0x182>
	default:
		break;
 80004ba:	bf00      	nop
 80004bc:	e004      	b.n	80004c8 <fsm_automatic_run+0x184>
		break;
 80004be:	bf00      	nop
 80004c0:	e002      	b.n	80004c8 <fsm_automatic_run+0x184>
		break;
 80004c2:	bf00      	nop
 80004c4:	e000      	b.n	80004c8 <fsm_automatic_run+0x184>
		break;
 80004c6:	bf00      	nop
	}

	switch (status_light_2) {
 80004c8:	4b4e      	ldr	r3, [pc, #312]	; (8000604 <fsm_automatic_run+0x2c0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	2b03      	cmp	r3, #3
 80004d0:	d877      	bhi.n	80005c2 <fsm_automatic_run+0x27e>
 80004d2:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_automatic_run+0x194>)
 80004d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	08000511 	.word	0x08000511
 80004e0:	0800054b 	.word	0x0800054b
 80004e4:	08000585 	.word	0x08000585
	case INIT:
		status_light_2 = AUTO_GREEN;
 80004e8:	4b46      	ldr	r3, [pc, #280]	; (8000604 <fsm_automatic_run+0x2c0>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	601a      	str	r2, [r3, #0]
		setTimer(2, GREEN_LED_Delay);
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <fsm_automatic_run+0x2b8>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4619      	mov	r1, r3
 80004f4:	2002      	movs	r0, #2
 80004f6:	f000 fd79 	bl	8000fec <setTimer>
		counter_light_2 = GREEN_LED_Delay / 1000;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <fsm_automatic_run+0x2b8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a37      	ldr	r2, [pc, #220]	; (80005dc <fsm_automatic_run+0x298>)
 8000500:	fb82 1203 	smull	r1, r2, r2, r3
 8000504:	1192      	asrs	r2, r2, #6
 8000506:	17db      	asrs	r3, r3, #31
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	4a37      	ldr	r2, [pc, #220]	; (80005e8 <fsm_automatic_run+0x2a4>)
 800050c:	6013      	str	r3, [r2, #0]
		break;
 800050e:	e05f      	b.n	80005d0 <fsm_automatic_run+0x28c>
	case AUTO_RED:
		setRedLight2(blink);
 8000510:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fa9f 	bl	8000a58 <setRedLight2>
		if (timer_flag[2] == 1) {
 800051a:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <fsm_automatic_run+0x2b4>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d151      	bne.n	80005c6 <fsm_automatic_run+0x282>
			status_light_2 = AUTO_GREEN;
 8000522:	4b38      	ldr	r3, [pc, #224]	; (8000604 <fsm_automatic_run+0x2c0>)
 8000524:	2203      	movs	r2, #3
 8000526:	601a      	str	r2, [r3, #0]
			setTimer(2, GREEN_LED_Delay);
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <fsm_automatic_run+0x2b8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	2002      	movs	r0, #2
 8000530:	f000 fd5c 	bl	8000fec <setTimer>
			counter_light_2 = GREEN_LED_Delay / 1000;
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <fsm_automatic_run+0x2b8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a28      	ldr	r2, [pc, #160]	; (80005dc <fsm_automatic_run+0x298>)
 800053a:	fb82 1203 	smull	r1, r2, r2, r3
 800053e:	1192      	asrs	r2, r2, #6
 8000540:	17db      	asrs	r3, r3, #31
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000546:	6013      	str	r3, [r2, #0]
		}
		break;
 8000548:	e03d      	b.n	80005c6 <fsm_automatic_run+0x282>
	case AUTO_GREEN:
		setGreenLight2(blink);
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <fsm_automatic_run+0x2b0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fa9e 	bl	8000a90 <setGreenLight2>
		if (timer_flag[2] == 1) {
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <fsm_automatic_run+0x2b4>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d136      	bne.n	80005ca <fsm_automatic_run+0x286>
			status_light_2 = AUTO_YELLOW;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <fsm_automatic_run+0x2c0>)
 800055e:	2204      	movs	r2, #4
 8000560:	601a      	str	r2, [r3, #0]
			setTimer(2, YELLOW_LED_Delay);
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <fsm_automatic_run+0x2bc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	2002      	movs	r0, #2
 800056a:	f000 fd3f 	bl	8000fec <setTimer>
			counter_light_2 = YELLOW_LED_Delay / 1000;
 800056e:	4b24      	ldr	r3, [pc, #144]	; (8000600 <fsm_automatic_run+0x2bc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <fsm_automatic_run+0x298>)
 8000574:	fb82 1203 	smull	r1, r2, r2, r3
 8000578:	1192      	asrs	r2, r2, #6
 800057a:	17db      	asrs	r3, r3, #31
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <fsm_automatic_run+0x2a4>)
 8000580:	6013      	str	r3, [r2, #0]
		}
		break;
 8000582:	e022      	b.n	80005ca <fsm_automatic_run+0x286>
	case AUTO_YELLOW:
		setYellowLight2(blink);
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <fsm_automatic_run+0x2b0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f000 fa9d 	bl	8000ac8 <setYellowLight2>
		if (timer_flag[2] == 1) {
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <fsm_automatic_run+0x2b4>)
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d11b      	bne.n	80005ce <fsm_automatic_run+0x28a>
			status_light_2 = AUTO_RED;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <fsm_automatic_run+0x2c0>)
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
			setTimer(2, RED_LED_Delay);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <fsm_automatic_run+0x294>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	2002      	movs	r0, #2
 80005a4:	f000 fd22 	bl	8000fec <setTimer>
			counter_light_2 = RED_LED_Delay / 1000;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <fsm_automatic_run+0x294>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <fsm_automatic_run+0x298>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1192      	asrs	r2, r2, #6
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <fsm_automatic_run+0x2a4>)
 80005ba:	6013      	str	r3, [r2, #0]
		}
		break;
 80005bc:	e007      	b.n	80005ce <fsm_automatic_run+0x28a>
		return;
 80005be:	bf00      	nop
 80005c0:	e006      	b.n	80005d0 <fsm_automatic_run+0x28c>
	default:
		break;
 80005c2:	bf00      	nop
 80005c4:	e004      	b.n	80005d0 <fsm_automatic_run+0x28c>
		break;
 80005c6:	bf00      	nop
 80005c8:	e002      	b.n	80005d0 <fsm_automatic_run+0x28c>
		break;
 80005ca:	bf00      	nop
 80005cc:	e000      	b.n	80005d0 <fsm_automatic_run+0x28c>
		break;
 80005ce:	bf00      	nop
	}
}
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000010 	.word	0x20000010
 80005dc:	10624dd3 	.word	0x10624dd3
 80005e0:	20000050 	.word	0x20000050
 80005e4:	20000048 	.word	0x20000048
 80005e8:	2000004c 	.word	0x2000004c
 80005ec:	2000000c 	.word	0x2000000c
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000044 	.word	0x20000044
 80005f8:	2000010c 	.word	0x2000010c
 80005fc:	20000014 	.word	0x20000014
 8000600:	20000018 	.word	0x20000018
 8000604:	20000008 	.word	0x20000008

08000608 <fsm_manual_run>:
 *      Author: ASUS
 */

#include "fsm_manual.h"

void fsm_manual_run() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	if (status == NORMAL_MODE)
 800060c:	4ba7      	ldr	r3, [pc, #668]	; (80008ac <fsm_manual_run+0x2a4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	f000 8140 	beq.w	8000896 <fsm_manual_run+0x28e>
		return;

	if (timer_flag[2] == 1) { 	// using timer3 to blink the led
 8000616:	4ba6      	ldr	r3, [pc, #664]	; (80008b0 <fsm_manual_run+0x2a8>)
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10a      	bne.n	8000634 <fsm_manual_run+0x2c>
		blink = 1 - blink;
 800061e:	4ba5      	ldr	r3, [pc, #660]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1c3 0301 	rsb	r3, r3, #1
 8000626:	4aa3      	ldr	r2, [pc, #652]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000628:	6013      	str	r3, [r2, #0]
		setTimer(2, 500); // toggle every 500ms, this would get f = 2Hz for blinking the led
 800062a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fcdc 	bl	8000fec <setTimer>
	}

	if (timer_flag[1] == 1) {								// out of time, go back to normal mode
 8000634:	4b9e      	ldr	r3, [pc, #632]	; (80008b0 <fsm_manual_run+0x2a8>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <fsm_manual_run+0x38>
		reset_to_normal_mode();
 800063c:	f000 f94c 	bl	80008d8 <reset_to_normal_mode>
	}

	switch (status) {
 8000640:	4b9a      	ldr	r3, [pc, #616]	; (80008ac <fsm_manual_run+0x2a4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b04      	cmp	r3, #4
 8000646:	f000 80e3 	beq.w	8000810 <fsm_manual_run+0x208>
 800064a:	2b04      	cmp	r3, #4
 800064c:	f300 8125 	bgt.w	800089a <fsm_manual_run+0x292>
 8000650:	2b02      	cmp	r3, #2
 8000652:	d002      	beq.n	800065a <fsm_manual_run+0x52>
 8000654:	2b03      	cmp	r3, #3
 8000656:	d06e      	beq.n	8000736 <fsm_manual_run+0x12e>
			counter_lights = 1;							// reset counter for switching 7-seg lights

		}
		break;
	default:
		break;
 8000658:	e11f      	b.n	800089a <fsm_manual_run+0x292>
		setRedLight1(blink);
 800065a:	4b96      	ldr	r3, [pc, #600]	; (80008b4 <fsm_manual_run+0x2ac>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f9a6 	bl	80009b0 <setRedLight1>
		setRedLight2(blink);
 8000664:	4b93      	ldr	r3, [pc, #588]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 f9f5 	bl	8000a58 <setRedLight2>
		if (isButtonPressed(1) == 1) {						// change mode
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fe3a 	bl	80002e8 <isButtonPressed>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d12b      	bne.n	80006d2 <fsm_manual_run+0xca>
			status = MANUAL_YELLOW;
 800067a:	4b8c      	ldr	r3, [pc, #560]	; (80008ac <fsm_manual_run+0x2a4>)
 800067c:	2203      	movs	r2, #3
 800067e:	601a      	str	r2, [r3, #0]
			counter_temp = YELLOW_LED_Delay / 1000;		// update temporary counter storing red led delay
 8000680:	4b8d      	ldr	r3, [pc, #564]	; (80008b8 <fsm_manual_run+0x2b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a8d      	ldr	r2, [pc, #564]	; (80008bc <fsm_manual_run+0x2b4>)
 8000686:	fb82 1203 	smull	r1, r2, r2, r3
 800068a:	1192      	asrs	r2, r2, #6
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	4a8b      	ldr	r2, [pc, #556]	; (80008c0 <fsm_manual_run+0x2b8>)
 8000692:	6013      	str	r3, [r2, #0]
			counter_light_1 = YELLOW_LED_Delay / 1000;	// counter light 1 show the value of current manual light
 8000694:	4b88      	ldr	r3, [pc, #544]	; (80008b8 <fsm_manual_run+0x2b0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a88      	ldr	r2, [pc, #544]	; (80008bc <fsm_manual_run+0x2b4>)
 800069a:	fb82 1203 	smull	r1, r2, r2, r3
 800069e:	1192      	asrs	r2, r2, #6
 80006a0:	17db      	asrs	r3, r3, #31
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	4a87      	ldr	r2, [pc, #540]	; (80008c4 <fsm_manual_run+0x2bc>)
 80006a6:	6013      	str	r3, [r2, #0]
			counter_light_2 = status;										// counter light 2 show the mode
 80006a8:	4b80      	ldr	r3, [pc, #512]	; (80008ac <fsm_manual_run+0x2a4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a86      	ldr	r2, [pc, #536]	; (80008c8 <fsm_manual_run+0x2c0>)
 80006ae:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);							// set timer 1 to 5 seconds for manual event
 80006b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fc99 	bl	8000fec <setTimer>
			setTimer(2, 500); 							// set timer 2 for led blinking
 80006ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 fc94 	bl	8000fec <setTimer>
			setTimer(3, 250);							// timer 3 still counting 7-seg light
 80006c4:	21fa      	movs	r1, #250	; 0xfa
 80006c6:	2003      	movs	r0, #3
 80006c8:	f000 fc90 	bl	8000fec <setTimer>
			counter_lights = 1;							// reset counter for switching 7-seg lights
 80006cc:	4b7f      	ldr	r3, [pc, #508]	; (80008cc <fsm_manual_run+0x2c4>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1) {	// increasing 7-segment light counter
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff fe08 	bl	80002e8 <isButtonPressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d109      	bne.n	80006f2 <fsm_manual_run+0xea>
			counter_temp++;
 80006de:	4b78      	ldr	r3, [pc, #480]	; (80008c0 <fsm_manual_run+0x2b8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a76      	ldr	r2, [pc, #472]	; (80008c0 <fsm_manual_run+0x2b8>)
 80006e6:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 80006e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fc7d 	bl	8000fec <setTimer>
		if (isButtonPressed(3) == 1) {// set the new value for 7-segment light counter
 80006f2:	2003      	movs	r0, #3
 80006f4:	f7ff fdf8 	bl	80002e8 <isButtonPressed>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	f040 80cf 	bne.w	800089e <fsm_manual_run+0x296>
			RED_LED_Delay = counter_temp * 1000;
 8000700:	4b6f      	ldr	r3, [pc, #444]	; (80008c0 <fsm_manual_run+0x2b8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4a70      	ldr	r2, [pc, #448]	; (80008d0 <fsm_manual_run+0x2c8>)
 800070e:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 8000710:	f241 3188 	movw	r1, #5000	; 0x1388
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fc69 	bl	8000fec <setTimer>
			counter_light_1 = RED_LED_Delay / 1000;	// counter light 1 show the value of current manual light
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <fsm_manual_run+0x2c8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <fsm_manual_run+0x2b4>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1192      	asrs	r2, r2, #6
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4a66      	ldr	r2, [pc, #408]	; (80008c4 <fsm_manual_run+0x2bc>)
 800072c:	6013      	str	r3, [r2, #0]
			counter_lights = 1;							// reset counter for switching 7-seg lights
 800072e:	4b67      	ldr	r3, [pc, #412]	; (80008cc <fsm_manual_run+0x2c4>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
		break;
 8000734:	e0b3      	b.n	800089e <fsm_manual_run+0x296>
		setYellowLight1(blink);
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f970 	bl	8000a20 <setYellowLight1>
		setYellowLight2(blink);
 8000740:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f9bf 	bl	8000ac8 <setYellowLight2>
		if (isButtonPressed(1) == 1) {						// change mode
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff fdcc 	bl	80002e8 <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d12b      	bne.n	80007ae <fsm_manual_run+0x1a6>
			status = MANUAL_GREEN;
 8000756:	4b55      	ldr	r3, [pc, #340]	; (80008ac <fsm_manual_run+0x2a4>)
 8000758:	2204      	movs	r2, #4
 800075a:	601a      	str	r2, [r3, #0]
			counter_temp = GREEN_LED_Delay / 1000;		// update temporary counter storing red led delay
 800075c:	4b5d      	ldr	r3, [pc, #372]	; (80008d4 <fsm_manual_run+0x2cc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a56      	ldr	r2, [pc, #344]	; (80008bc <fsm_manual_run+0x2b4>)
 8000762:	fb82 1203 	smull	r1, r2, r2, r3
 8000766:	1192      	asrs	r2, r2, #6
 8000768:	17db      	asrs	r3, r3, #31
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	4a54      	ldr	r2, [pc, #336]	; (80008c0 <fsm_manual_run+0x2b8>)
 800076e:	6013      	str	r3, [r2, #0]
			counter_light_1 = GREEN_LED_Delay / 1000;		// counter light 1 show the value of current manual light
 8000770:	4b58      	ldr	r3, [pc, #352]	; (80008d4 <fsm_manual_run+0x2cc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a51      	ldr	r2, [pc, #324]	; (80008bc <fsm_manual_run+0x2b4>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	1192      	asrs	r2, r2, #6
 800077c:	17db      	asrs	r3, r3, #31
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	4a50      	ldr	r2, [pc, #320]	; (80008c4 <fsm_manual_run+0x2bc>)
 8000782:	6013      	str	r3, [r2, #0]
			counter_light_2 = status;										// counter light 2 show the mode
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <fsm_manual_run+0x2a4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a4f      	ldr	r2, [pc, #316]	; (80008c8 <fsm_manual_run+0x2c0>)
 800078a:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000);							// set timer 1 to 5 seconds for manual event
 800078c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000790:	2001      	movs	r0, #1
 8000792:	f000 fc2b 	bl	8000fec <setTimer>
			setTimer(2, 500); 							// set timer 2 for led blinking
 8000796:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800079a:	2002      	movs	r0, #2
 800079c:	f000 fc26 	bl	8000fec <setTimer>
			setTimer(3, 250);							// timer 3 still counting 7-seg light
 80007a0:	21fa      	movs	r1, #250	; 0xfa
 80007a2:	2003      	movs	r0, #3
 80007a4:	f000 fc22 	bl	8000fec <setTimer>
			counter_lights = 1;							// reset counter for switching 7-seg lights
 80007a8:	4b48      	ldr	r3, [pc, #288]	; (80008cc <fsm_manual_run+0x2c4>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1) {						// increasing 7-segment light counter
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fd9a 	bl	80002e8 <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d109      	bne.n	80007ce <fsm_manual_run+0x1c6>
			counter_temp++;
 80007ba:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <fsm_manual_run+0x2b8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a3f      	ldr	r2, [pc, #252]	; (80008c0 <fsm_manual_run+0x2b8>)
 80007c2:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 80007c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fc0f 	bl	8000fec <setTimer>
		if (isButtonPressed(3) == 1) {						// set the new value for 7-segment light counter
 80007ce:	2003      	movs	r0, #3
 80007d0:	f7ff fd8a 	bl	80002e8 <isButtonPressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d163      	bne.n	80008a2 <fsm_manual_run+0x29a>
			YELLOW_LED_Delay = counter_temp * 1000;
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <fsm_manual_run+0x2b8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e2:	fb02 f303 	mul.w	r3, r2, r3
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <fsm_manual_run+0x2b0>)
 80007e8:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 80007ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 fbfc 	bl	8000fec <setTimer>
			counter_light_1 = YELLOW_LED_Delay / 1000;	// counter light 1 show the value of current manual light
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <fsm_manual_run+0x2b0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a30      	ldr	r2, [pc, #192]	; (80008bc <fsm_manual_run+0x2b4>)
 80007fa:	fb82 1203 	smull	r1, r2, r2, r3
 80007fe:	1192      	asrs	r2, r2, #6
 8000800:	17db      	asrs	r3, r3, #31
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <fsm_manual_run+0x2bc>)
 8000806:	6013      	str	r3, [r2, #0]
			counter_lights = 1;							// reset counter for switching 7-seg lights
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <fsm_manual_run+0x2c4>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
		break;
 800080e:	e048      	b.n	80008a2 <fsm_manual_run+0x29a>
		setGreenLight1(blink);
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <fsm_manual_run+0x2ac>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f8e7 	bl	80009e8 <setGreenLight1>
		setGreenLight2(blink);
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <fsm_manual_run+0x2ac>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f936 	bl	8000a90 <setGreenLight2>
		if (isButtonPressed(1) == 1) { 					// change back to normal mode [reset all required status]
 8000824:	2001      	movs	r0, #1
 8000826:	f7ff fd5f 	bl	80002e8 <isButtonPressed>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d101      	bne.n	8000834 <fsm_manual_run+0x22c>
			reset_to_normal_mode();
 8000830:	f000 f852 	bl	80008d8 <reset_to_normal_mode>
		if (isButtonPressed(2) == 1) {						// increasing 7-segment light counter
 8000834:	2002      	movs	r0, #2
 8000836:	f7ff fd57 	bl	80002e8 <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d109      	bne.n	8000854 <fsm_manual_run+0x24c>
			counter_temp++;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <fsm_manual_run+0x2b8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <fsm_manual_run+0x2b8>)
 8000848:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 800084a:	f241 3188 	movw	r1, #5000	; 0x1388
 800084e:	2001      	movs	r0, #1
 8000850:	f000 fbcc 	bl	8000fec <setTimer>
		if (isButtonPressed(3) == 1) {						// set the new value for 7-segment light counter
 8000854:	2003      	movs	r0, #3
 8000856:	f7ff fd47 	bl	80002e8 <isButtonPressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d122      	bne.n	80008a6 <fsm_manual_run+0x29e>
			GREEN_LED_Delay = counter_temp * 1000;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <fsm_manual_run+0x2b8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000868:	fb02 f303 	mul.w	r3, r2, r3
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <fsm_manual_run+0x2cc>)
 800086e:	6013      	str	r3, [r2, #0]
			setTimer(1, 5000); 									// set 5 seconds for manual events
 8000870:	f241 3188 	movw	r1, #5000	; 0x1388
 8000874:	2001      	movs	r0, #1
 8000876:	f000 fbb9 	bl	8000fec <setTimer>
			counter_light_1 = GREEN_LED_Delay / 1000;	// counter light 1 show the value of current manual light
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <fsm_manual_run+0x2cc>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <fsm_manual_run+0x2b4>)
 8000880:	fb82 1203 	smull	r1, r2, r2, r3
 8000884:	1192      	asrs	r2, r2, #6
 8000886:	17db      	asrs	r3, r3, #31
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <fsm_manual_run+0x2bc>)
 800088c:	6013      	str	r3, [r2, #0]
			counter_lights = 1;							// reset counter for switching 7-seg lights
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <fsm_manual_run+0x2c4>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
		break;
 8000894:	e007      	b.n	80008a6 <fsm_manual_run+0x29e>
		return;
 8000896:	bf00      	nop
 8000898:	e006      	b.n	80008a8 <fsm_manual_run+0x2a0>
		break;
 800089a:	bf00      	nop
 800089c:	e004      	b.n	80008a8 <fsm_manual_run+0x2a0>
		break;
 800089e:	bf00      	nop
 80008a0:	e002      	b.n	80008a8 <fsm_manual_run+0x2a0>
		break;
 80008a2:	bf00      	nop
 80008a4:	e000      	b.n	80008a8 <fsm_manual_run+0x2a0>
		break;
 80008a6:	bf00      	nop
	}

}
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000
 80008b0:	2000010c 	.word	0x2000010c
 80008b4:	20000044 	.word	0x20000044
 80008b8:	20000018 	.word	0x20000018
 80008bc:	10624dd3 	.word	0x10624dd3
 80008c0:	20000050 	.word	0x20000050
 80008c4:	20000048 	.word	0x20000048
 80008c8:	2000004c 	.word	0x2000004c
 80008cc:	2000000c 	.word	0x2000000c
 80008d0:	20000010 	.word	0x20000010
 80008d4:	20000014 	.word	0x20000014

080008d8 <reset_to_normal_mode>:
int counter_temp = 0;
int RED_LED_Delay = 5000;
int GREEN_LED_Delay = 3000;
int YELLOW_LED_Delay = 2000;

void reset_to_normal_mode() {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	status = NORMAL_MODE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <reset_to_normal_mode+0x2c>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
	status_light_1 = INIT;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <reset_to_normal_mode+0x30>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
	status_light_2 = INIT;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <reset_to_normal_mode+0x34>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
	blink = 0;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <reset_to_normal_mode+0x38>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
	counter_temp = 0;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <reset_to_normal_mode+0x3c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008
 8000910:	20000044 	.word	0x20000044
 8000914:	20000050 	.word	0x20000050

08000918 <initLights>:
 *      Author: ASUS
 */

#include "graphics.h"

void initLights() {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	counter_temp = 0;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <initLights+0x88>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
	status_light_1 = INIT;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <initLights+0x8c>)
 8000924:	2201      	movs	r2, #1
 8000926:	601a      	str	r2, [r3, #0]
	status_light_2 = INIT;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <initLights+0x90>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2102      	movs	r1, #2
 8000932:	481e      	ldr	r0, [pc, #120]	; (80009ac <initLights+0x94>)
 8000934:	f000 ff5f 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2104      	movs	r1, #4
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <initLights+0x94>)
 800093e:	f000 ff5a 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2108      	movs	r1, #8
 8000946:	4819      	ldr	r0, [pc, #100]	; (80009ac <initLights+0x94>)
 8000948:	f000 ff55 	bl	80017f6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <initLights+0x94>)
 8000952:	f000 ff50 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2120      	movs	r1, #32
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <initLights+0x94>)
 800095c:	f000 ff4b 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <initLights+0x94>)
 8000966:	f000 ff46 	bl	80017f6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000970:	480e      	ldr	r0, [pc, #56]	; (80009ac <initLights+0x94>)
 8000972:	f000 ff40 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <initLights+0x94>)
 800097e:	f000 ff3a 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <initLights+0x94>)
 800098a:	f000 ff34 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <initLights+0x94>)
 8000996:	f000 ff2e 	bl	80017f6 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000050 	.word	0x20000050
 80009a4:	20000004 	.word	0x20000004
 80009a8:	20000008 	.word	0x20000008
 80009ac:	40010800 	.word	0x40010800

080009b0 <setRedLight1>:

void setRedLight1(int blink) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, blink);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	2102      	movs	r1, #2
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <setRedLight1+0x34>)
 80009c2:	f000 ff18 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2104      	movs	r1, #4
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <setRedLight1+0x34>)
 80009cc:	f000 ff13 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2108      	movs	r1, #8
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <setRedLight1+0x34>)
 80009d6:	f000 ff0e 	bl	80017f6 <HAL_GPIO_WritePin>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40010800 	.word	0x40010800

080009e8 <setGreenLight1>:
void setGreenLight1(int blink) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2102      	movs	r1, #2
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <setGreenLight1+0x34>)
 80009f6:	f000 fefe 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, blink);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	2104      	movs	r1, #4
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <setGreenLight1+0x34>)
 8000a04:	f000 fef7 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <setGreenLight1+0x34>)
 8000a0e:	f000 fef2 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010800 	.word	0x40010800

08000a20 <setYellowLight1>:
void setYellowLight1(int blink) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <setYellowLight1+0x34>)
 8000a2e:	f000 fee2 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2104      	movs	r1, #4
 8000a36:	4807      	ldr	r0, [pc, #28]	; (8000a54 <setYellowLight1+0x34>)
 8000a38:	f000 fedd 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, blink);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	2108      	movs	r1, #8
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <setYellowLight1+0x34>)
 8000a46:	f000 fed6 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40010800 	.word	0x40010800

08000a58 <setRedLight2>:

void setRedLight2(int blink) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, blink);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	2110      	movs	r1, #16
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <setRedLight2+0x34>)
 8000a6a:	f000 fec4 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2120      	movs	r1, #32
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <setRedLight2+0x34>)
 8000a74:	f000 febf 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <setRedLight2+0x34>)
 8000a7e:	f000 feba 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010800 	.word	0x40010800

08000a90 <setGreenLight2>:
void setGreenLight2(int blink) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <setGreenLight2+0x34>)
 8000a9e:	f000 feaa 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, blink);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <setGreenLight2+0x34>)
 8000aac:	f000 fea3 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <setGreenLight2+0x34>)
 8000ab6:	f000 fe9e 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <setYellowLight2>:
void setYellowLight2(int blink) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <setYellowLight2+0x34>)
 8000ad6:	f000 fe8e 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2120      	movs	r1, #32
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <setYellowLight2+0x34>)
 8000ae0:	f000 fe89 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, blink);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <setYellowLight2+0x34>)
 8000aee:	f000 fe82 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010800 	.word	0x40010800

08000b00 <display7SegmentLED>:

void display7SegmentLED(int number, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pins[]) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0cc      	sub	sp, #304	; 0x130
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	6019      	str	r1, [r3, #0]
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	601a      	str	r2, [r3, #0]
	int num[10][7] = {
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4a1b      	ldr	r2, [pc, #108]	; (8000b88 <display7SegmentLED+0x88>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	4611      	mov	r1, r2
 8000b20:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000b24:	461a      	mov	r2, r3
 8000b26:	f001 fe67 	bl	80027f8 <memcpy>
			{ 0, 0, 0, 1, 1, 1, 1 }, // 7
			{ 0, 0, 0, 0, 0, 0, 0 }, // 8
			{ 0, 0, 0, 0, 1, 0, 0 }  // 9
	};

	for (int i = 0; i < 7; i++) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000b30:	e01f      	b.n	8000b72 <display7SegmentLED+0x72>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pins[i], num[number][i]);
 8000b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	1d3a      	adds	r2, r7, #4
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	8818      	ldrh	r0, [r3, #0]
 8000b40:	f107 0114 	add.w	r1, r7, #20
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	1a9b      	subs	r3, r3, r2
 8000b50:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000b54:	4413      	add	r3, r2
 8000b56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	4601      	mov	r1, r0
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f000 fe47 	bl	80017f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	dddb      	ble.n	8000b32 <display7SegmentLED+0x32>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	0800283c 	.word	0x0800283c

08000b8c <display7SegmentLight>:

void display7SegmentLight() {
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
	uint16_t GPIO_Pins[] = { SEG0_Pin, SEG1_Pin, SEG2_Pin, SEG3_Pin,
 8000b92:	4b82      	ldr	r3, [pc, #520]	; (8000d9c <display7SegmentLight+0x210>)
 8000b94:	463c      	mov	r4, r7
 8000b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b98:	c407      	stmia	r4!, {r0, r1, r2}
 8000b9a:	8023      	strh	r3, [r4, #0]
	SEG4_Pin, SEG5_Pin, SEG6_Pin };
	switch (counter_lights) {
 8000b9c:	4b80      	ldr	r3, [pc, #512]	; (8000da0 <display7SegmentLight+0x214>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	f200 80ea 	bhi.w	8000d7c <display7SegmentLight+0x1f0>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <display7SegmentLight+0x24>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bc1 	.word	0x08000bc1
 8000bb4:	08000c25 	.word	0x08000c25
 8000bb8:	08000c93 	.word	0x08000c93
 8000bbc:	08000cf5 	.word	0x08000cf5
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc6:	4877      	ldr	r0, [pc, #476]	; (8000da4 <display7SegmentLight+0x218>)
 8000bc8:	f000 fe15 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd2:	4874      	ldr	r0, [pc, #464]	; (8000da4 <display7SegmentLight+0x218>)
 8000bd4:	f000 fe0f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bde:	4871      	ldr	r0, [pc, #452]	; (8000da4 <display7SegmentLight+0x218>)
 8000be0:	f000 fe09 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	486e      	ldr	r0, [pc, #440]	; (8000da4 <display7SegmentLight+0x218>)
 8000bec:	f000 fe03 	bl	80017f6 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 / 10, GPIOB, GPIO_Pins); // first digit of light 1
 8000bf0:	4b6d      	ldr	r3, [pc, #436]	; (8000da8 <display7SegmentLight+0x21c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a6d      	ldr	r2, [pc, #436]	; (8000dac <display7SegmentLight+0x220>)
 8000bf6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfa:	1092      	asrs	r2, r2, #2
 8000bfc:	17db      	asrs	r3, r3, #31
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	463a      	mov	r2, r7
 8000c02:	496b      	ldr	r1, [pc, #428]	; (8000db0 <display7SegmentLight+0x224>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff7b 	bl	8000b00 <display7SegmentLED>
		if (timer_flag[3] == 1) {
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <display7SegmentLight+0x228>)
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	f040 80b8 	bne.w	8000d84 <display7SegmentLight+0x1f8>
			counter_lights = 2;
 8000c14:	4b62      	ldr	r3, [pc, #392]	; (8000da0 <display7SegmentLight+0x214>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000c1a:	21fa      	movs	r1, #250	; 0xfa
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f9e5 	bl	8000fec <setTimer>
		}
		break;
 8000c22:	e0af      	b.n	8000d84 <display7SegmentLight+0x1f8>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2a:	485e      	ldr	r0, [pc, #376]	; (8000da4 <display7SegmentLight+0x218>)
 8000c2c:	f000 fde3 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c36:	485b      	ldr	r0, [pc, #364]	; (8000da4 <display7SegmentLight+0x218>)
 8000c38:	f000 fddd 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4858      	ldr	r0, [pc, #352]	; (8000da4 <display7SegmentLight+0x218>)
 8000c44:	f000 fdd7 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4e:	4855      	ldr	r0, [pc, #340]	; (8000da4 <display7SegmentLight+0x218>)
 8000c50:	f000 fdd1 	bl	80017f6 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_1 % 10, GPIOB, GPIO_Pins); // second digit of light 1
 8000c54:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <display7SegmentLight+0x21c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <display7SegmentLight+0x220>)
 8000c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5e:	1099      	asrs	r1, r3, #2
 8000c60:	17d3      	asrs	r3, r2, #31
 8000c62:	1ac8      	subs	r0, r1, r3
 8000c64:	4603      	mov	r3, r0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4403      	add	r3, r0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	1ad0      	subs	r0, r2, r3
 8000c6e:	463b      	mov	r3, r7
 8000c70:	461a      	mov	r2, r3
 8000c72:	494f      	ldr	r1, [pc, #316]	; (8000db0 <display7SegmentLight+0x224>)
 8000c74:	f7ff ff44 	bl	8000b00 <display7SegmentLED>
		if (timer_flag[3] == 1) {
 8000c78:	4b4e      	ldr	r3, [pc, #312]	; (8000db4 <display7SegmentLight+0x228>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	f040 8083 	bne.w	8000d88 <display7SegmentLight+0x1fc>
			counter_lights = 3;
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <display7SegmentLight+0x214>)
 8000c84:	2203      	movs	r2, #3
 8000c86:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000c88:	21fa      	movs	r1, #250	; 0xfa
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f9ae 	bl	8000fec <setTimer>
		}
		break;
 8000c90:	e07a      	b.n	8000d88 <display7SegmentLight+0x1fc>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4842      	ldr	r0, [pc, #264]	; (8000da4 <display7SegmentLight+0x218>)
 8000c9a:	f000 fdac 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	483f      	ldr	r0, [pc, #252]	; (8000da4 <display7SegmentLight+0x218>)
 8000ca6:	f000 fda6 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	483c      	ldr	r0, [pc, #240]	; (8000da4 <display7SegmentLight+0x218>)
 8000cb2:	f000 fda0 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbc:	4839      	ldr	r0, [pc, #228]	; (8000da4 <display7SegmentLight+0x218>)
 8000cbe:	f000 fd9a 	bl	80017f6 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 / 10, GPIOB, GPIO_Pins); // first digit of light 2
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <display7SegmentLight+0x22c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a39      	ldr	r2, [pc, #228]	; (8000dac <display7SegmentLight+0x220>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1092      	asrs	r2, r2, #2
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	463a      	mov	r2, r7
 8000cd4:	4936      	ldr	r1, [pc, #216]	; (8000db0 <display7SegmentLight+0x224>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff12 	bl	8000b00 <display7SegmentLED>
		if (timer_flag[3] == 1) {
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <display7SegmentLight+0x228>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d153      	bne.n	8000d8c <display7SegmentLight+0x200>
			counter_lights = 4;
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <display7SegmentLight+0x214>)
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	601a      	str	r2, [r3, #0]
			setTimer(3, 250);
 8000cea:	21fa      	movs	r1, #250	; 0xfa
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f97d 	bl	8000fec <setTimer>
		}
		break;
 8000cf2:	e04b      	b.n	8000d8c <display7SegmentLight+0x200>
	case 4:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <display7SegmentLight+0x218>)
 8000cfc:	f000 fd7b 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <display7SegmentLight+0x218>)
 8000d08:	f000 fd75 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4824      	ldr	r0, [pc, #144]	; (8000da4 <display7SegmentLight+0x218>)
 8000d14:	f000 fd6f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <display7SegmentLight+0x218>)
 8000d20:	f000 fd69 	bl	80017f6 <HAL_GPIO_WritePin>
		display7SegmentLED(counter_light_2 % 10, GPIOB, GPIO_Pins); // second digit of light 2
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <display7SegmentLight+0x22c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <display7SegmentLight+0x220>)
 8000d2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2e:	1099      	asrs	r1, r3, #2
 8000d30:	17d3      	asrs	r3, r2, #31
 8000d32:	1ac8      	subs	r0, r1, r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4403      	add	r3, r0
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	1ad0      	subs	r0, r2, r3
 8000d3e:	463b      	mov	r3, r7
 8000d40:	461a      	mov	r2, r3
 8000d42:	491b      	ldr	r1, [pc, #108]	; (8000db0 <display7SegmentLight+0x224>)
 8000d44:	f7ff fedc 	bl	8000b00 <display7SegmentLED>
		if (timer_flag[3] == 1) {
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <display7SegmentLight+0x228>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d11f      	bne.n	8000d90 <display7SegmentLight+0x204>
			counter_lights = 1;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <display7SegmentLight+0x214>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
			if (status == NORMAL_MODE) {
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <display7SegmentLight+0x230>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d109      	bne.n	8000d72 <display7SegmentLight+0x1e6>
				counter_light_1--;
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <display7SegmentLight+0x21c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <display7SegmentLight+0x21c>)
 8000d66:	6013      	str	r3, [r2, #0]
				counter_light_2--;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <display7SegmentLight+0x22c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <display7SegmentLight+0x22c>)
 8000d70:	6013      	str	r3, [r2, #0]
			}
			setTimer(3, 250);
 8000d72:	21fa      	movs	r1, #250	; 0xfa
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f939 	bl	8000fec <setTimer>
		}
		break;
 8000d7a:	e009      	b.n	8000d90 <display7SegmentLight+0x204>
	default:
		counter_lights = 1;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <display7SegmentLight+0x214>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
		break;
 8000d82:	e006      	b.n	8000d92 <display7SegmentLight+0x206>
		break;
 8000d84:	bf00      	nop
 8000d86:	e004      	b.n	8000d92 <display7SegmentLight+0x206>
		break;
 8000d88:	bf00      	nop
 8000d8a:	e002      	b.n	8000d92 <display7SegmentLight+0x206>
		break;
 8000d8c:	bf00      	nop
 8000d8e:	e000      	b.n	8000d92 <display7SegmentLight+0x206>
		break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08002954 	.word	0x08002954
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	40010800 	.word	0x40010800
 8000da8:	20000048 	.word	0x20000048
 8000dac:	66666667 	.word	0x66666667
 8000db0:	40010c00 	.word	0x40010c00
 8000db4:	2000010c 	.word	0x2000010c
 8000db8:	2000004c 	.word	0x2000004c
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc4:	f000 fa16 	bl	80011f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dc8:	f000 f812 	bl	8000df0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dcc:	f000 f898 	bl	8000f00 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000dd0:	f000 f84a 	bl	8000e68 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <main+0x2c>)
 8000dd6:	f001 f953 	bl	8002080 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	initButton();
 8000dda:	f7ff f9b7 	bl	800014c <initButton>
	while (1) {
		fsm_automatic_run();
 8000dde:	f7ff fab1 	bl	8000344 <fsm_automatic_run>
		fsm_manual_run();
 8000de2:	f7ff fc11 	bl	8000608 <fsm_manual_run>
		display7SegmentLight();
 8000de6:	f7ff fed1 	bl	8000b8c <display7SegmentLight>
		fsm_automatic_run();
 8000dea:	e7f8      	b.n	8000dde <main+0x1e>
 8000dec:	200000b4 	.word	0x200000b4

08000df0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b090      	sub	sp, #64	; 0x40
 8000df4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fd08 	bl	8002814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fcfe 	bl	8001828 <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x46>
		Error_Handler();
 8000e32:	f000 f8d5 	bl	8000fe0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e36:	230f      	movs	r3, #15
 8000e38:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ff6a 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x6e>
		Error_Handler();
 8000e5a:	f000 f8c1 	bl	8000fe0 <Error_Handler>
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3740      	adds	r7, #64	; 0x40
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e92:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_TIM2_Init+0x94>)
 8000e9c:	2209      	movs	r2, #9
 8000e9e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_TIM2_Init+0x94>)
 8000eae:	f001 f897 	bl	8001fe0 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x54>
		Error_Handler();
 8000eb8:	f000 f892 	bl	8000fe0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_TIM2_Init+0x94>)
 8000eca:	f001 fa2d 	bl	8002328 <HAL_TIM_ConfigClockSource>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000ed4:	f000 f884 	bl	8000fe0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_TIM2_Init+0x94>)
 8000ee6:	f001 fbf9 	bl	80026dc <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000ef0:	f000 f876 	bl	8000fe0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000b4 	.word	0x200000b4

08000f00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_GPIO_Init+0xbc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000f44:	2200      	movs	r2, #0
 8000f46:	f640 717e 	movw	r1, #3966	; 0xf7e
 8000f4a:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <MX_GPIO_Init+0xc0>)
 8000f4c:	f000 fc53 	bl	80017f6 <HAL_GPIO_WritePin>
			LED_RED1_Pin | LED_GREEN1_Pin | LED_YELLOW1_Pin | LED_RED2_Pin
					| LED_GREEN2_Pin | LED_YELLOW2_Pin | EN0_Pin | EN1_Pin
					| EN2_Pin | EN3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000f50:	2200      	movs	r2, #0
 8000f52:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 8000f56:	481b      	ldr	r0, [pc, #108]	; (8000fc4 <MX_GPIO_Init+0xc4>)
 8000f58:	f000 fc4d 	bl	80017f6 <HAL_GPIO_WritePin>
					| SEG5_Pin | SEG6_Pin | SEG10_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
	 LED_GREEN2_Pin LED_YELLOW2_Pin EN0_Pin EN1_Pin
	 EN2_Pin EN3_Pin */
	GPIO_InitStruct.Pin = LED_RED1_Pin | LED_GREEN1_Pin | LED_YELLOW1_Pin
 8000f5c:	f640 737e 	movw	r3, #3966	; 0xf7e
 8000f60:	60bb      	str	r3, [r7, #8]
			| LED_RED2_Pin | LED_GREEN2_Pin | LED_YELLOW2_Pin | EN0_Pin
			| EN1_Pin | EN2_Pin | EN3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <MX_GPIO_Init+0xc0>)
 8000f76:	f000 faad 	bl	80014d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG11_Pin
	 SEG12_Pin SEG13_Pin SEG14_Pin SEG15_Pin
	 SEG16_Pin SEG3_Pin SEG4_Pin SEG5_Pin
	 SEG6_Pin SEG10_Pin */
	GPIO_InitStruct.Pin = SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG11_Pin | SEG12_Pin
 8000f7a:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8000f7e:	60bb      	str	r3, [r7, #8]
			| SEG13_Pin | SEG14_Pin | SEG15_Pin | SEG16_Pin | SEG3_Pin
			| SEG4_Pin | SEG5_Pin | SEG6_Pin | SEG10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_GPIO_Init+0xc4>)
 8000f94:	f000 fa9e 	bl	80014d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
	GPIO_InitStruct.Pin = Button1_Pin | Button2_Pin | Button3_Pin;
 8000f98:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f9c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_GPIO_Init+0xc0>)
 8000fae:	f000 fa91 	bl	80014d4 <HAL_GPIO_Init>

}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fd0:	f000 f82c 	bl	800102c <timerRun>
	getKeyInput();
 8000fd4:	f7ff f970 	bl	80002b8 <getKeyInput>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <setTimer>:
#define TIMER_CYCLE 10

int timer_flag[NO_TIMERS + 1];
int timer_counter[NO_TIMERS + 1];

void setTimer(int flagNo, int duration) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	timer_counter[flagNo] = duration / TIMER_CYCLE;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <setTimer+0x34>)
 8000ffa:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffe:	1092      	asrs	r2, r2, #2
 8001000:	17db      	asrs	r3, r3, #31
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <setTimer+0x38>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[flagNo] = 0;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <setTimer+0x3c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2100      	movs	r1, #0
 8001012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	66666667 	.word	0x66666667
 8001024:	200000fc 	.word	0x200000fc
 8001028:	2000010c 	.word	0x2000010c

0800102c <timerRun>:

void timerRun() {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 8001032:	2301      	movs	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e01c      	b.n	8001072 <timerRun+0x46>
		if (timer_counter[flagNo] > 0) {
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <timerRun+0x58>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dd13      	ble.n	800106c <timerRun+0x40>
			timer_counter[flagNo]--;
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <timerRun+0x58>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <timerRun+0x58>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[flagNo] <= 0) {
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <timerRun+0x58>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc04      	bgt.n	800106c <timerRun+0x40>
				timer_flag[flagNo] = 1;
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <timerRun+0x5c>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2101      	movs	r1, #1
 8001068:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int flagNo = 1; flagNo <= NO_TIMERS; flagNo++) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b03      	cmp	r3, #3
 8001076:	dddf      	ble.n	8001038 <timerRun+0xc>
			}
		}
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	200000fc 	.word	0x200000fc
 8001088:	2000010c 	.word	0x2000010c

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_MspInit+0x5c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_MspInit+0x60>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_MspInit+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001100:	d113      	bne.n	800112a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_TIM_Base_MspInit+0x44>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_TIM_Base_MspInit+0x44>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_TIM_Base_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	201c      	movs	r0, #28
 8001120:	f000 f9a1 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001124:	201c      	movs	r0, #28
 8001126:	f000 f9ba 	bl	800149e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800113c:	e7fe      	b.n	800113c <NMI_Handler+0x4>

0800113e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <MemManage_Handler+0x4>

0800114a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <UsageFault_Handler+0x4>

08001156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117e:	f000 f87f 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM2_IRQHandler+0x10>)
 800118e:	f000 ffc3 	bl	8002118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000b4 	.word	0x200000b4

0800119c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff fff8 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ae:	490c      	ldr	r1, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c4:	4c09      	ldr	r4, [pc, #36]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f001 faed 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d6:	f7ff fdf3 	bl	8000dc0 <main>
  bx lr
 80011da:	4770      	bx	lr
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80011e4:	08002990 	.word	0x08002990
  ldr r2, =_sbss
 80011e8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80011ec:	20000120 	.word	0x20000120

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x28>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x28>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f923 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff ff3c 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f93b 	bl	80014ba <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f903 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000001c 	.word	0x2000001c
 8001278:	20000024 	.word	0x20000024
 800127c:	20000020 	.word	0x20000020

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000024 	.word	0x20000024
 80012a0:	2000011c 	.word	0x2000011c

080012a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	2000011c 	.word	0x2000011c

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4906      	ldr	r1, [pc, #24]	; (8001350 <__NVIC_EnableIRQ+0x34>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff90 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff2d 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff42 	bl	8001300 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff90 	bl	80013a8 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5f 	bl	8001354 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff35 	bl	800131c <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e148      	b.n	800177a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e8:	2201      	movs	r2, #1
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	429a      	cmp	r2, r3
 8001502:	f040 8137 	bne.w	8001774 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4aa3      	ldr	r2, [pc, #652]	; (8001798 <HAL_GPIO_Init+0x2c4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d05e      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001510:	4aa1      	ldr	r2, [pc, #644]	; (8001798 <HAL_GPIO_Init+0x2c4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d875      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001516:	4aa1      	ldr	r2, [pc, #644]	; (800179c <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d058      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 800151c:	4a9f      	ldr	r2, [pc, #636]	; (800179c <HAL_GPIO_Init+0x2c8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d86f      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001522:	4a9f      	ldr	r2, [pc, #636]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d052      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001528:	4a9d      	ldr	r2, [pc, #628]	; (80017a0 <HAL_GPIO_Init+0x2cc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d869      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800152e:	4a9d      	ldr	r2, [pc, #628]	; (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d04c      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001534:	4a9b      	ldr	r2, [pc, #620]	; (80017a4 <HAL_GPIO_Init+0x2d0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d863      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800153a:	4a9b      	ldr	r2, [pc, #620]	; (80017a8 <HAL_GPIO_Init+0x2d4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d046      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
 8001540:	4a99      	ldr	r2, [pc, #612]	; (80017a8 <HAL_GPIO_Init+0x2d4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d85d      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d82a      	bhi.n	80015a0 <HAL_GPIO_Init+0xcc>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d859      	bhi.n	8001602 <HAL_GPIO_Init+0x12e>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <HAL_GPIO_Init+0x80>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	080015cf 	.word	0x080015cf
 8001558:	080015a9 	.word	0x080015a9
 800155c:	080015bb 	.word	0x080015bb
 8001560:	080015fd 	.word	0x080015fd
 8001564:	08001603 	.word	0x08001603
 8001568:	08001603 	.word	0x08001603
 800156c:	08001603 	.word	0x08001603
 8001570:	08001603 	.word	0x08001603
 8001574:	08001603 	.word	0x08001603
 8001578:	08001603 	.word	0x08001603
 800157c:	08001603 	.word	0x08001603
 8001580:	08001603 	.word	0x08001603
 8001584:	08001603 	.word	0x08001603
 8001588:	08001603 	.word	0x08001603
 800158c:	08001603 	.word	0x08001603
 8001590:	08001603 	.word	0x08001603
 8001594:	08001603 	.word	0x08001603
 8001598:	080015b1 	.word	0x080015b1
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	4a82      	ldr	r2, [pc, #520]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a6:	e02c      	b.n	8001602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e029      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	3304      	adds	r3, #4
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e024      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	3308      	adds	r3, #8
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e01f      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	330c      	adds	r3, #12
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e01a      	b.n	8001604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d6:	2304      	movs	r3, #4
 80015d8:	623b      	str	r3, [r7, #32]
          break;
 80015da:	e013      	b.n	8001604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	611a      	str	r2, [r3, #16]
          break;
 80015ee:	e009      	b.n	8001604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	615a      	str	r2, [r3, #20]
          break;
 80015fa:	e003      	b.n	8001604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x130>
          break;
 8001602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d801      	bhi.n	800160e <HAL_GPIO_Init+0x13a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	e001      	b.n	8001612 <HAL_GPIO_Init+0x13e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d802      	bhi.n	8001620 <HAL_GPIO_Init+0x14c>
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x152>
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	3b08      	subs	r3, #8
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	210f      	movs	r1, #15
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	401a      	ands	r2, r3
 8001638:	6a39      	ldr	r1, [r7, #32]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8090 	beq.w	8001774 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001654:	4b56      	ldr	r3, [pc, #344]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800166c:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_GPIO_Init+0x2e0>)
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2e4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1e0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2e8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1dc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2ec>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1d8>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e004      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e002      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_GPIO_Init+0x1e2>
 80016b4:	2300      	movs	r3, #0
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	4093      	lsls	r3, r2
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c6:	493b      	ldr	r1, [pc, #236]	; (80017b4 <HAL_GPIO_Init+0x2e0>)
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4937      	ldr	r1, [pc, #220]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4933      	ldr	r1, [pc, #204]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	492d      	ldr	r1, [pc, #180]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001716:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4929      	ldr	r1, [pc, #164]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001720:	4013      	ands	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4923      	ldr	r1, [pc, #140]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	491f      	ldr	r1, [pc, #124]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001748:	4013      	ands	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4919      	ldr	r1, [pc, #100]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4915      	ldr	r1, [pc, #84]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	3301      	adds	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	f47f aeaf 	bne.w	80014e8 <HAL_GPIO_Init+0x14>
  }
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	372c      	adds	r7, #44	; 0x2c
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	10320000 	.word	0x10320000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10220000 	.word	0x10220000
 80017a4:	10210000 	.word	0x10210000
 80017a8:	10120000 	.word	0x10120000
 80017ac:	10110000 	.word	0x10110000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e001      	b.n	80017ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]
 8001802:	4613      	mov	r3, r2
 8001804:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001812:	e003      	b.n	800181c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	041a      	lsls	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	611a      	str	r2, [r3, #16]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e26c      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b04      	cmp	r3, #4
 8001852:	d00c      	beq.n	800186e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001854:	4b8f      	ldr	r3, [pc, #572]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d112      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06c      	beq.n	8001954 <HAL_RCC_OscConfig+0x12c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d168      	bne.n	8001954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e246      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x76>
 8001890:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x98>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7a      	ldr	r2, [pc, #488]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbc>
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a71      	ldr	r2, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6a      	ldr	r2, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fcce 	bl	80012a4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fcca 	bl	80012a4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1fa      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xe4>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fcba 	bl	80012a4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fcb6 	bl	80012a4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1e6      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x10c>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1ba      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4939      	ldr	r1, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc6f 	bl	80012a4 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc6b 	bl	80012a4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e19b      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4927      	ldr	r1, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc4e 	bl	80012a4 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc4a 	bl	80012a4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e17a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03a      	beq.n	8001aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc2e 	bl	80012a4 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc2a 	bl	80012a4 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e15a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 fa9a 	bl	8001fa4 <RCC_Delay>
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fc14 	bl	80012a4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fc10 	bl	80012a4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d908      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e140      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	42420000 	.word	0x42420000
 8001a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e9      	bne.n	8001a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a6 	beq.w	8001c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b97      	ldr	r3, [pc, #604]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b94      	ldr	r3, [pc, #592]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a93      	ldr	r2, [pc, #588]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b91      	ldr	r3, [pc, #580]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fbd1 	bl	80012a4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fbcd 	bl	80012a4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0fd      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x312>
 8001b2c:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e02d      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x334>
 8001b42:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a75      	ldr	r2, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	e01c      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x356>
 8001b64:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a6c      	ldr	r2, [pc, #432]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb81 	bl	80012a4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb7d 	bl	80012a4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ab      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ee      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb6b 	bl	80012a4 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb67 	bl	80012a4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e095      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8081 	beq.w	8001d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d061      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d146      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fb3b 	bl	80012a4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff fb37 	bl	80012a4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e067      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	492d      	ldr	r1, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a19      	ldr	r1, [r3, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb0b 	bl	80012a4 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fb07 	bl	80012a4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e037      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46a>
 8001cb0:	e02f      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff faf4 	bl	80012a4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff faf0 	bl	80012a4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e020      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x498>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e013      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d0      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e073      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06b      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa44 	bl	80012a4 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff fa40 	bl	80012a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e053      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d210      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f9a2 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08002964 	.word	0x08002964
 8001ef4:	2000001c 	.word	0x2000001c
 8001ef8:	20000020 	.word	0x20000020

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e027      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	e027      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0c5b      	lsrs	r3, r3, #17
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	fb02 f203 	mul.w	r2, r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e004      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	613b      	str	r3, [r7, #16]
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	693b      	ldr	r3, [r7, #16]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	08002974 	.word	0x08002974
 8001f9c:	08002984 	.word	0x08002984
 8001fa0:	003d0900 	.word	0x003d0900

08001fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <RCC_Delay+0x34>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <RCC_Delay+0x38>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0a5b      	lsrs	r3, r3, #9
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fc0:	bf00      	nop
  }
  while (Delay --);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	60fa      	str	r2, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <RCC_Delay+0x1c>
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	2000001c 	.word	0x2000001c
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e041      	b.n	8002076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff f872 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fa6e 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e035      	b.n	8002104 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_TIM_Base_Start_IT+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x4e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d004      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x4e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_TIM_Base_Start_IT+0x94>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d010      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e007      	b.n	8002102 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400

08002118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0202 	mvn.w	r2, #2
 8002144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f9b4 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9a7 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f9b6 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0204 	mvn.w	r2, #4
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f98a 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f97d 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f98c 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0208 	mvn.w	r2, #8
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f960 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f953 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f962 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b10      	cmp	r3, #16
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b10      	cmp	r3, #16
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0210 	mvn.w	r2, #16
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2208      	movs	r2, #8
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f936 	bl	80024c8 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f929 	bl	80024b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f938 	bl	80024da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0201 	mvn.w	r2, #1
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe96 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b80      	cmp	r3, #128	; 0x80
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa6b 	bl	800279e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f8fc 	bl	80024ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b20      	cmp	r3, #32
 800230e:	d107      	bne.n	8002320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0220 	mvn.w	r2, #32
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa36 	bl	800278c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_TIM_ConfigClockSource+0x1c>
 8002340:	2302      	movs	r3, #2
 8002342:	e0b4      	b.n	80024ae <HAL_TIM_ConfigClockSource+0x186>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d03e      	beq.n	80023fc <HAL_TIM_ConfigClockSource+0xd4>
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	f200 8087 	bhi.w	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238a:	f000 8086 	beq.w	800249a <HAL_TIM_ConfigClockSource+0x172>
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d87f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d01a      	beq.n	80023ce <HAL_TIM_ConfigClockSource+0xa6>
 8002398:	2b70      	cmp	r3, #112	; 0x70
 800239a:	d87b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d050      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x11a>
 80023a0:	2b60      	cmp	r3, #96	; 0x60
 80023a2:	d877      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d03c      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xfa>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d873      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d058      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x13a>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d86f      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d064      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d86b      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d060      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d867      	bhi.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05c      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d05a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x15a>
 80023cc:	e062      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f000 f95e 	bl	800269e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	609a      	str	r2, [r3, #8]
      break;
 80023fa:	e04f      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f000 f947 	bl	800269e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800241e:	609a      	str	r2, [r3, #8]
      break;
 8002420:	e03c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	f000 f8be 	bl	80025b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2150      	movs	r1, #80	; 0x50
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f915 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002440:	e02c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 f8dc 	bl	800260c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2160      	movs	r1, #96	; 0x60
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f905 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002460:	e01c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f000 f89e 	bl	80025b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f8f5 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002480:	e00c      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f000 f8ec 	bl	800266a <TIM_ITRx_SetConfig>
      break;
 8002492:	e003      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e000      	b.n	800249c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800249a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x28>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a22      	ldr	r2, [pc, #136]	; (80025ac <TIM_Base_SetConfig+0xac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x52>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x52>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <TIM_Base_SetConfig+0xac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <TIM_Base_SetConfig+0xa8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	615a      	str	r2, [r3, #20]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400

080025b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 0201 	bic.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f023 030a 	bic.w	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0210 	bic.w	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	031b      	lsls	r3, r3, #12
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	f043 0307 	orr.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	609a      	str	r2, [r3, #8]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e041      	b.n	8002778 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d004      	beq.n	800274c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10c      	bne.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400

0800278c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	2600      	movs	r6, #0
 80027b4:	4d0c      	ldr	r5, [pc, #48]	; (80027e8 <__libc_init_array+0x38>)
 80027b6:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	42a6      	cmp	r6, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	f000 f830 	bl	8002824 <_init>
 80027c4:	2600      	movs	r6, #0
 80027c6:	4d0a      	ldr	r5, [pc, #40]	; (80027f0 <__libc_init_array+0x40>)
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <__libc_init_array+0x44>)
 80027ca:	1b64      	subs	r4, r4, r5
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	42a6      	cmp	r6, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d8:	4798      	blx	r3
 80027da:	3601      	adds	r6, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e2:	4798      	blx	r3
 80027e4:	3601      	adds	r6, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	08002988 	.word	0x08002988
 80027ec:	08002988 	.word	0x08002988
 80027f0:	08002988 	.word	0x08002988
 80027f4:	0800298c 	.word	0x0800298c

080027f8 <memcpy>:
 80027f8:	440a      	add	r2, r1
 80027fa:	4291      	cmp	r1, r2
 80027fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002800:	d100      	bne.n	8002804 <memcpy+0xc>
 8002802:	4770      	bx	lr
 8002804:	b510      	push	{r4, lr}
 8002806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800280a:	4291      	cmp	r1, r2
 800280c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002810:	d1f9      	bne.n	8002806 <memcpy+0xe>
 8002812:	bd10      	pop	{r4, pc}

08002814 <memset>:
 8002814:	4603      	mov	r3, r0
 8002816:	4402      	add	r2, r0
 8002818:	4293      	cmp	r3, r2
 800281a:	d100      	bne.n	800281e <memset+0xa>
 800281c:	4770      	bx	lr
 800281e:	f803 1b01 	strb.w	r1, [r3], #1
 8002822:	e7f9      	b.n	8002818 <memset+0x4>

08002824 <_init>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr

08002830 <_fini>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr
